import Head from 'next/head'
import Image from 'next/image'
import { motion } from "framer-motion";
import { createRef, use, useEffect, useState } from 'react';
import markdownIt from "markdown-it"
import markdownItHighlight from "markdown-it-highlightjs"
//@ts-ignore
import markdownItKatex from "@ryanxcharles/markdown-it-katex"
import Notify from '@/hooks/useNotify';

export type Message = {
  role: 'system' | 'user' | 'assistant',
  content: string
}

export default function Home() {

  const [isOpen, setIsOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  const [messages, setMessages] = useState<Message[]>([])

  const [currentMessage, setCurrentMessage] = useState<string>("")

  const [errMsg, setErrMsg] = useState<string>("")

  const input = createRef<HTMLTextAreaElement>()


  const [innerHeight, setInnerHeight] = useState(0)
  const [inputScrollTop, setInputScrollTop] = useState(0)

  useEffect(() => {
    setInnerHeight(window.innerHeight - 10)
  }, [])

  useEffect(() => {
    const body = document.getElementById('body')
    if (!body) return
    body.scrollTop = body.scrollHeight
  }, [messages, currentMessage])


  useEffect(() => {
    if (isLoading) return
    if (!input.current) return
    input.current.blur()
  }, [isLoading])



  const renderResponse = (response: string) => {
    return markdownIt().use(markdownItKatex).use(markdownItHighlight).render(response)
  }

  const handlerSubmit = async () => {
    if (!input.current) return

    const text = input.current.value
    input.current.value = ''
    setIsLoading(true)

    setMessages(prev => [...prev, {
      role: 'user',
      content: text
    }])
    try {
      const { body, status } = await fetch("/api/chat", {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          messages: [...messages, {
            role: 'user',
            content: text
          }]
        })
      })
      if (status === 200) {
        if (!body) return
        const reader = body.getReader()
        const decoder = new TextDecoder('utf-8');
        let responseMessage = ""
        while (true) {
          const { done, value } = await reader.read()
          if (done) break
          const text = decoder.decode(value)
          console.log(text);

          responseMessage += text
          setCurrentMessage(prev => prev + text)
        }
        setMessages(prev => [...prev, {
          role: 'assistant',
          content: responseMessage
        }])
        setCurrentMessage("")
        setIsLoading(false)
      } else {
        setIsLoading(false)
        if (!body) return
        const reader = body.getReader()
        const decoder = new TextDecoder('utf-8');
        let responseMessage = ""
        while (true) {
          const { done, value } = await reader.read()
          if (done) break
          const text = decoder.decode(value)
          responseMessage += text
        }
        setErrMsg(responseMessage)
        setMessages([])
      }
    } catch (error) {
      console.log(error);

    }
  }


  return (
    <>
      <Head>
        <title>ChatGPT Clone</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Notify message={errMsg} />
      <div className={`w-full mx-auto h-[${innerHeight}px] flex flex-col md:max-w-[70ch]`} >
        {/* Header */}
        <div className='h-[10%] w-full flex justify-between items-start px-4 py-2 shadow-md rounded-b-md bg-white dark:bg-transparent'>
          <div className='flex flex-col'>
            <div>
              <motion.span
                className='text-3xl text-transparent font-extrabold bg-clip-text bg-gradient-to-r from-sky-400 to-emerald-600'>ChatGPT</motion.span>
              <span className='text-3xl  text-gray-800 font-extrabold mr-1 dark:text-gray-200'>Clone</span>
            </div>
            <span className='text-gray-400 font-mono text-md'>Base On ChatGPT-3.5-turbo</span>
          </div>
          <div />
        </div>
        {/* <div className='h-[10%]' /> */}
        {/* Header End */}
        {/* Body */}
        <motion.div
          initial={false}
          animate={isOpen ? 'open' : 'closed'}
          variants={{
            open: { opacity: 1, height: innerHeight * 0.8 },
            closed: { opacity: 0, height: 0 }
          }}
          className='max-h-[80%] w-full overflow-scroll rounded-md px-2'
          id='body'
        >
          {
            messages.map((message, idx) => <motion.div
              key={idx}
              initial={{
                x: message.role === "user" ? 30 : 10,
                opacity: 0
              }}
              animate={{
                x: 0,
                opacity: 1,
                transition: { duration: 1, delay: 0.2, type: "spring" }
              }}
              className={`w-full rounded-md flex px-4 py-2 mb-2`}
            >
              <div className={`w-8 h-8 flex justify-center items-center p-5 rounded-full bg-gradient-to-br ${message.role === "user" ? "from-sky-400 to-green-500" : " from-yellow-500 to-red-400"} mr-2`}>
                <span className='text-white dark:text-gray-300'>{message.role === "user" ? "You" : "GPT"}</span>
              </div>
              <div className={`px-3 py-2 overflow-auto rounded-md ${message.role === 'user' ? 'bg-slate-300 dark:bg-slate-500' : ' bg-slate-400 dark:bg-slate-900'} text-slate-600 text-sm dark:text-white`} dangerouslySetInnerHTML={{ __html: renderResponse(message.content) }} />
            </motion.div>)
          }
          {
            isLoading && currentMessage !== "" && <motion.div
              initial={{
                x: 10,
                opacity: 0
              }}
              exit={{
                x: 10,
                opacity: 0
              }}
              animate={{
                x: 0,
                opacity: 1,
                transition: { duration: .5, type: "spring" }
              }}
              className={`w-full flex items-end px-5 py-2`}
            >
              <div className={`w-8 h-8 flex justify-center items-center p-5 rounded-full bg-gradient-to-br ${"from-yellow-500 to-red-400"} mr-2`}>
                <span className='text-white dark:text-gray-300'>GPT</span>
              </div>
              <div className='px-3 py-2 overflow-auto rounded-md bg-slate-400 text-slate-600 text-sm dark:text-white dark:bg-slate-900' dangerouslySetInnerHTML={{ __html: renderResponse(currentMessage) }} />
            </motion.div>
          }
        </motion.div>

        {/* Body End */}

        {/* Footer */}
        <div className='h-[10%] w-full flex flex-col py-2 items-center rounded-t-md'>
          <form className='w-full md:w-[85%]'>
            <label className='w-full relative'>
              <textarea
                onKeyDown={e => {
                  if (e.key === 'Enter' && e.shiftKey) {
                    e.preventDefault();
                    console.log('Enter + Shift');
                    handlerSubmit()
                  }
                }}
                ref={input}
                onFocus={() => {
                  if (!isOpen) document.scrollingElement?.scrollTo({
                    top: innerHeight * 0.8,
                    behavior: 'smooth'
                  })
                  setInputScrollTop(document.scrollingElement?.scrollTop || 0)
                  setIsOpen(true)
                }}
                onBlur={() => {
                  document.scrollingElement?.scrollTo({
                    top: inputScrollTop,
                    behavior: 'smooth'
                  })
                }}
                rows={2}
                disabled={isLoading}
                className=' text-gray-500 dark:text-white font-mono w-full h-full bg-slate-300 dark:bg-slate-500 rounded-md pl-2 pr-8 focus:ring-0 focus:outline-none disabled:text-center '
                placeholder={!isLoading ? '写下你想聊的内容……\nShift+Enter发送 或点击右侧按钮' : 'ChatGPT正在思考中…… '}
              />
              <svg
                onClick={handlerSubmit}
                className={`w-6 h-6 z-10 text-gray-500 dark:text-gray-200  absolute top-[-25px] right-3  rotate-[-40deg] ${isLoading && "hidden"}`}
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
              >
                <path strokeLinecap="round" strokeLinejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
              </svg>
            </label>
          </form>
        </div>
        {/* Footer End */}
      </div>
    </>
  )
}


